// Chef generated Varnish config for frontend load balancing caches
// varnish.vcl.erb
// Local edits to this file will be lost on the next chef-client run.

import std; // Import to get access to Varnish's std library to include error file later.

probe healthcheck {
  .url = "/health.json";
  .interval = 5s;
  .timeout = 10s;
  .window = 5;
  .threshold = 3;
}

// IPs authorized to ban/purge pages
acl purge_acl {
  "localhost";
}

backend mtg1 {
  .host = "127.0.0.1";
  .port = "8080";
  .probe = healthcheck;
}

sub vcl_recv {

  set req.backend = mtg1; 

  if (req.url ~ "^/data/avatars/.*") {
    unset req.http.cookie;
    // set req.url = regsub(req.url, "\?.*$", "");
  }

  if (req.url ~ "^/[^?]+.(jpeg|jpg|png|gif|ico|js|css|txt|gz|zip|lzma|bz2|tgz|tbz|html|htm)(\?.*|)$") {
     unset req.http.cookie;
     // set req.url = regsub(req.url, "\?.*$", "");
  }

  if (req.http.x-forwarded-for) {
    set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
  } else {
    set req.http.X-Forwarded-For = client.ip;
  }

  if (req.url == "/health.json" && !(req.http.host ~ "(?i)^[a-z0-9].*?[a-z]")) {
    error 760 "OK";
  }

  // Temporary flood block
  if (req.http.user-agent ~ "WordPress") {
    error 403 "Disallowed";
  }

  // Deny purge requests if IP isn't on whitelist
  if (req.request == "PURGE") {
    if (client.ip !~ purge_acl) {
      error 405 "Not allowed.";
    }
    return (lookup);
  }

  // Handle stale content based on backend health
  if (req.backend.healthy) {
    // Serve slightly-stale content while updating.
    set req.grace = 30m;
  } else {
    // Allow stale content if backend server is slow or down.
    set req.grace = 6h;
  }

  // Handle compression correctly to get more cache hits.
  if (req.http.Accept-Encoding) {
    if (req.http.Accept-Encoding ~ "gzip") {
      // If the browser supports it, we'll use gzip.
      set req.http.Accept-Encoding = "gzip";
    } else {
      // Unknown algorithm. Remove it and send unencoded.
      unset req.http.Accept-Encoding;
    }
  }

  // Deny requests for /_raindrops
  if (req.url ~ "^/_raindrops$") {
    error 404 "Not found";
  }
}

sub vcl_hit {
  if (req.request == "PURGE") {
    purge;
    error 200 "Purged.";
  }
}

sub vcl_miss {
  if (req.request == "PURGE") {
    purge;
    error 200 "Purged.";
  }
}

sub vcl_error {
  // Catch 760 error code thrown by vcl_recv when healthcheck is requestsed without a host header
  if (obj.status == 760) {
    set obj.status = 200;
    synthetic {"{"alive":true}"};
    return (deliver);
  }
  
  // Serve a custom error page from varnish if the backend is throwing 500 errors
  if (obj.status >= 500 && obj.status <= 505) {
    set obj.http.Content-Type = "text/html; charset=utf-8";
    synthetic std.fileread("/etc/varnish/500.html");
    return(deliver);
  }
}

sub vcl_fetch {
  // Keep stale response for six hours in case backend fails.
  set beresp.grace = 6h;

  // If something is wrong, ease off backend on this URL.
  if (beresp.status >= 500) {
    set beresp.ttl = 1m;
  }

  if (req.url ~ "\.(png|gif|jpg|swf|css|js)$") {
    unset beresp.http.set-cookie;
  }

  // Return the name of the backend that handled the request.
  set beresp.http.X-Backend = beresp.backend.name;
}

sub vcl_deliver {
  // Return the hostname of the varnish box that served the request.
  set resp.http.X-Served-By = server.hostname;
  set resp.http.X-Director = req.backend;

  // Return HIT or MISS for varnish cache key
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
    set resp.http.X-Cache-Hits = obj.hits;
  } else {
    set resp.http.X-Cache = "MISS";
  }

  return (deliver);
}
